#!/usr/bin/env python

import os, inspect, math, subprocess

print "This is "+ inspect.getfile(inspect.currentframe())
print "Beginning a convergence scan."

filename = "input.namelist"
jobFilename = "job.convergenceScan"
commentCode = "!ss"

try:
    sfincsSystem = os.environ["SFINCS_SYSTEM"]
except:
    print "Error! Unable to read the SFINCS_SYSTEM environment variable. Make sure you have set it."
    raise
print "I detect SFINCS_SYSTEM = "+sfincsSystem


if not os.path.isfile(filename):
    print "Error! The file "+filename+" must be present in the directory from which you call sfincsScan."
    exit(1)

# For each system, 
if sfincsSystem=="edison":
    submitCommand = "qsub "+jobFilename
    def nameJobFile(original,name):
        # Modify the job.sfincsScan file to change the name that appears in the queue.
        # Insert the new line after the original first line, since the first line is a shebang.
        original.insert(1,"#PBS -N "+name+"\n")
        return original

elif sfincsSystem=="hydra":
    submitCommand = "llsubmit "+jobFilename
    def nameJobFile(original,name):
        # Modify the job.sfincsScan file to change the name that appears in the queue.
        # Insert the new line after the original first line, since the first line is a shebang.
        original.insert(1,"# @ job_name = "+name+"\n")
        return original

elif sfincsSystem=="macports":
    submitCommand = "bash "+jobFilename
    def nameJobFile(original,name):
        # No changes needed to the job.sfincsScan file.
        return original

else:
    print "Error! SFINCS_SYSTEM="+sfincsSystem+" is not yet recognized by sfincsScan"
    print "You will need to edit sfincsScan to specify a few things for this system."
    exit(1)

#if sfincsSystem=='edison':
#    # Any checks that should be done for SFINCS_SYSTEM=edison can go here.
#    jobfileRequired = True
#elif sfincsSystem=='laptop':
#    # Any checks that should be done for SFINCS_SYSTEM=laptop can go here.
#    jobfileRequired = False
#else:
#    print "Error! This system is not known by sfincsScan"
#    print "You will need to edit sfincsScan"

# Any checks that should be done for other systems can go here.

#if jobfileRequired:
if not os.path.isfile(jobFilename):
    print "Error! A "+jobFilename+" file must be present in the directory from which you call this script (even for systems with no queue)."
    exit(1)

# Load the input file:
with open(filename, 'r') as f:
    inputFile = f.readlines()

# Next come some functions used in convergence scans which might be useful for other types of scans:

def uniq(seq): 
   checked = []
   for e in seq:
       if e not in checked:
           checked.append(e)
   return checked

def logspace(min,max,nn):
    if nn < 1:
        return []
    elif nn==1:
        return [min]

    if min <= 0:
        print "Error in logspace! min must be positive."
        exit(1)
    if max <= 0:
        print "Error in logspace! max must be positive."
        exit(1)
    return [math.exp(x/(nn-1.0)*(math.log(max)-math.log(min))+math.log(min)) for x in range(nn)]

def linspace(min,max,nn):
    if nn < 1:
        return []
    elif nn==1:
        return [min]
    return [x/(nn-1.0)*(max-min)+min for x in range(nn)]

def logspace_int(min,max,nn):
    return uniq(map(int,logspace(min,max,nn)))

def logspace_odd(min,max,nn):
    temp = map(int,logspace(min,max,nn))
    temp2 = []
    for x in temp:
        if (x % 2 == 0):
            temp2.append(x+1)
        else:
            temp2.append(x)
    return uniq(temp2)


def readScanVariable(varName, intOrFloat):
    # This subroutine reads the special scan commands in the input.namelist that are hidden from fortran:
    varName = varName.lower()
    returnValue = None
    numValidLines = 0
    for line in inputFile:
        line2 = line.strip().lower()
        # We need enough characters for the comment code, varName, =, and value: 
        if len(line2)<len(commentCode)+3:
            continue

        if not line2[:len(commentCode)]==commentCode:
            continue

        line3 = line2[len(commentCode):].strip()

        if len(line3) < len(varName)+2:
            continue

        if not line3[:len(varName)]==varName:
            continue

        line4 = line3[len(varName):].strip()

        if not line4[0] =="=":
            continue

        line5 = line4[1:].strip();
        # python does not recognize fortran's 1d+0 scientific notation
        line5 = line5.replace('d','e').replace('D','e')
        
        if intOrFloat=="int":
            try:
                returnValue = int(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+varName+" in "+filename+" but I was unable to parse the line to get an integer."
                print "Here is the line in question:"
                print line
        elif intOrFloat=="float":
            try:
                returnValue = float(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+varName+" in "+filename+" but I was unable to parse the line to get a float."
                print "Here is the line in question:"
                print line

    if returnValue==None:
        print "Error! Unable to find a valid setting for the scan variable "+varName+" in "+filename+"."
        print "A definition should have the following form:"
        if intOrFloat=="int":
            print commentCode+" "+varName+" = 1"
        elif intOrFloat=="float":
            print commentCode+" "+varName+" = 1.5"
        exit(1)

    if numValidLines > 1:
        print "Warning! More than 1 valid definition was found for the variable "+varName+". The last one will be used."

    print "Read "+varName+" = "+str(returnValue)
    return returnValue


def readVariable(varName, intOrFloat):
    # This function reads normal fortran variables from the input.namelist file.
    varName = varName.lower()
    returnValue = None
    numValidLines = 0
    for line in inputFile:
        line3 = line.strip().lower()
        if len(line3)<1:
            continue

        if line3[0]=="!":
            continue

        if len(line3) < len(varName)+2:
            continue

        if not line3[:len(varName)]==varName:
            continue

        line4 = line3[len(varName):].strip()

        if not line4[0] =="=":
            continue

        line5 = line4[1:].strip();
        # python does not recognize fortran's 1d+0 scientific notation
        line5 = line5.replace('d','e').replace('D','e')
        
        if intOrFloat=="int":
            try:
                returnValue = int(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+varName+" in "+filename+" but I was unable to parse the line to get an integer."
                print "Here is the line in question:"
                print line
        elif intOrFloat=="float":
            try:
                returnValue = float(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+varName+" in "+filename+" but I was unable to parse the line to get a float."
                print "Here is the line in question:"
                print line

    if returnValue==None:
        print "Error! Unable to find a valid setting for the variable "+varName+" in "+filename+"."
        exit(1)

    if numValidLines > 1:
        print "Warning! More than 1 valid definition was found for the variable "+varName+". The last one will be used."

    print "Read "+varName+" = "+str(returnValue)
    return returnValue

def namelistLineContains(line,varName):
    line2 = line.strip().lower()
    varName = varName.lower()
    # We need enough characters for the varName, =, and value: 
    if len(line2)<len(varName)+2:
        return False

    if line2[0]=="!":
        return False

    nextChar = line2[len(varName)]
    if line2[:len(varName)]==varName and (nextChar==" " or nextChar=="="):
        return True
    else:
        return False


Ntheta = readVariable("Ntheta","int")
NthetaMaxFactor = readScanVariable("NthetaMaxFactor","float")
NthetaMinFactor = readScanVariable("NthetaMinFactor","float")
NthetaNumRuns = readScanVariable("NthetaNumRuns","int")
if Ntheta<0:
    print "Error! Ntheta must be positive"
    exit(1)
if NthetaMaxFactor<0:
    print "Error! NthetaMaxFactor must be positive"
    exit(1)
if NthetaMinFactor<0:
    print "Error! NthetaMinFactor must be positive"
    exit(1)
Nthetas = logspace_odd(NthetaMinFactor*Ntheta,NthetaMaxFactor*Ntheta,NthetaNumRuns)
try:
    Nthetas.remove(Ntheta)
except ValueError:
    pass
print "Nthetas:",Nthetas

Nzeta = readVariable("Nzeta","int")
NzetaMaxFactor = readScanVariable("NzetaMaxFactor","float")
NzetaMinFactor = readScanVariable("NzetaMinFactor","float")
NzetaNumRuns = readScanVariable("NzetaNumRuns","int")
if Nzeta<0:
    print "Error! Nzeta must be positive"
    exit(1)
if NzetaMaxFactor<0:
    print "Error! NzetaMaxFactor must be positive"
    exit(1)
if NzetaMinFactor<0:
    print "Error! NzetaMinFactor must be positive"
    exit(1)
Nzetas = logspace_odd(NzetaMinFactor*Nzeta,NzetaMaxFactor*Nzeta,NzetaNumRuns)
try:
    Nzetas.remove(Nzeta)
except ValueError:
    pass
print "Nzetas:",Nzetas

Nxi = readVariable("Nxi","int")
NxiMaxFactor = readScanVariable("NxiMaxFactor","float")
NxiMinFactor = readScanVariable("NxiMinFactor","float")
NxiNumRuns = readScanVariable("NxiNumRuns","int")
if Nxi<0:
    print "Error! Nxi must be positive"
    exit(1)
if NxiMaxFactor<0:
    print "Error! NxiMaxFactor must be positive"
    exit(1)
if NxiMinFactor<0:
    print "Error! NxiMinFactor must be positive"
    exit(1)
Nxis = logspace_int(NxiMinFactor*Nxi,NxiMaxFactor*Nxi,NxiNumRuns)
try:
    Nxis.remove(Nxi)
except ValueError:
    pass
print "Nxis:",Nxis

numRunsInScan = 1+len(Nthetas)+len(Nzetas)+len(Nxis)

baseCase = [Ntheta,Nzeta,Nxi]

parametersForScan = []
for i in range(numRunsInScan):
    parametersForScan.append(list(baseCase))

currentIndex = 1
descriptions = ["baseCase"]

for i in range(len(Nthetas)):
    parametersForScan[currentIndex][0] = Nthetas[i]
    descriptions.append("Ntheta" + str(Nthetas[i]))
    currentIndex += 1

for i in range(len(Nzetas)):
    parametersForScan[currentIndex][1] = Nzetas[i]
    descriptions.append("Nzeta" + str(Nzetas[i]))
    currentIndex += 1

for i in range(len(Nxis)):
    parametersForScan[currentIndex][2] = Nxis[i]
    descriptions.append("Nxi" + str(Nxis[i]))
    currentIndex += 1

if currentIndex != numRunsInScan:
    print "Error! Something went wrong."
    exit(1)

if len(parametersForScan) != len(descriptions):
    print "Error! Something went wrong."
    exit(1)

# See if any runs with the same description already exist.
# This happens if you re-run sfincsScan more than once in the same directory.
runNum = 0
while runNum < numRunsInScan:
    directory = descriptions[runNum]
    if os.path.exists(directory):
        print "Warning: directory "+directory+" already exists, so skipping this run."
        numRunsInScan -= 1
        descriptions.pop(runNum)
        parametersForScan.pop(runNum)
        runNum -= 1
    runNum += 1
        

print
print "Here are the parameters for the "+str(numRunsInScan)+" runs we will launch:"
print "[Ntheta, Nzeta, Nxi]"
print "-----------------------------------------------------------------------"
for line in parametersForScan:
    print line

print
print "Here are the directories that will be created:"
print descriptions

while True:
    proceed=raw_input("Should I go ahead and launch these "+str(numRunsInScan)+" jobs? [y/n] ")
    if proceed=="y" or proceed=="n":
        break
    print "You must enter either y or n."

if proceed=="n":
    exit(0)
print "launching jobs..."

# Read in the job.sfincsScan file:
with open(jobFilename, 'r') as f:
    jobFile = f.readlines()

for runNum in range(numRunsInScan):
    directory = descriptions[runNum]
    print "Beginning to handle job "+str(runNum+1)+" of "+str(numRunsInScan)+": "+directory

    # To be extra safe, check again to see if the directory exists.
    if os.path.exists(directory):
        print "Warning: directory "+directory+" already exists."
        i = -1
        while True:
            i += 1
            directory2 = directory+"_"+str(i)
            if not os.path.exists(directory2):
                break
        directory = directory2
    os.makedirs(directory)
    os.chdir(directory)

    # Copy the job.sfincsScan file:
    thisJobFile = list(jobFile)
    # This next function is defined separately for each system in sfincsScan
    nameJobFile(thisJobFile,directory)
    f = open(jobFilename,"w")
    f.writelines(thisJobFile)
    f.close()

    # Now copy the input.namelist file:
    f = open(filename,"w")
    for line in inputFile:
        if namelistLineContains(line,"Ntheta"):
            line = "  Ntheta = "+str(parametersForScan[runNum][0])+" ! Set by sfincsScan.\n"
        if namelistLineContains(line,"Nzeta"):
            line = "  Nzeta = "+str(parametersForScan[runNum][1])+" ! Set by sfincsScan.\n"
        if namelistLineContains(line,"Nxi"):
            line = "  Nxi = "+str(parametersForScan[runNum][2])+" ! Set by sfincsScan.\n"
        f.write(line)
    f.close()

    # Submit the sfincs job:
    try:
        # We need to include .split(" ") to separate the command-line arguments into an array of strings.   
        # I'm not sure why python requires this. 
        submissionResult = subprocess.call(submitCommand.split(" "))
    except:
        print "ERROR! Unable to submit run "+directory+" for some reason."
        raise
    else:
        if submissionResult==0:
            print "No errors submitting job "+directory
        else:
            print "Nonzero exit code returned when trying to submit job "+directory

    os.chdir("..")
